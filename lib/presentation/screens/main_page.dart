import 'package:execu_docs/presentation/widgets/region_panel.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:file_picker/file_picker.dart';

import '../blocs/folder_cubit.dart';
import '../blocs/region_selection_cubit.dart';
import '../widgets/executors_offices_panel.dart';

class MainPage extends StatefulWidget {
  const MainPage({super.key});

  @override
  State<MainPage> createState() => _MainPageState();
}

class _MainPageState extends State<MainPage>
    with TickerProviderStateMixin {
  late final AnimationController _regionPanelController;
  late final Animation<Offset> _regionPanelOffset;

  late final AnimationController _executorPanelController;
  late final Animation<Offset> _executorPanelOffset;

  bool _dataVisible = false;

  Future<void> _selectFolder(BuildContext context) async {
    final folderCubit = context.read<FolderCubit>(); // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–æ await
    final result = await FilePicker.platform.getDirectoryPath();
    if (result != null) {
      folderCubit.setFolder(result);
    }
  }

  @override
  void initState() {
    super.initState();
    _regionPanelController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 300),
    );
    _regionPanelOffset = Tween<Offset>(
      begin: const Offset(1.0, 0.0),
      end: Offset.zero,
    ).animate(CurvedAnimation(
        parent: _regionPanelController, curve: Curves.easeInOut));

    _executorPanelController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 300),
    );
    _executorPanelOffset = Tween<Offset>(
      begin: const Offset(1.0, 0.0),
      end: Offset.zero,
    ).animate(CurvedAnimation(
        parent: _executorPanelController, curve: Curves.easeInOut));
  }

  void _toggleData() {
    if (_regionPanelController.isDismissed) {
      _regionPanelController.forward();
    } else {
      _regionPanelController.reverse();
    }
  }


  @override
  void dispose() {
    _regionPanelController.dispose();
    _executorPanelController.dispose();
    super.dispose();
  }


  double getDataWidth(BuildContext context) =>
      MediaQuery
          .of(context)
          .size
          .width * 1 / 4;

  @override
  Widget build(BuildContext context) {
    final folderPath = context
        .watch<FolderCubit>()
        .state;
    final dataWidth = getDataWidth(context);

    return BlocListener<RegionSelectionCubit, RegionSelectionState>(
        listener: (context, state) {
          if (state.isExecutorPanelOpen) {
            _executorPanelController.forward();
          } else {
            _executorPanelController.reverse();
          }
        },
        child: BlocBuilder<RegionSelectionCubit, RegionSelectionState>(
          builder: (context, state) {
            final isExecutorPanelOpen = state.isExecutorPanelOpen;
            final selectedRegion = state.selectedRegion;
            return Scaffold(
              appBar: AppBar(title: const Text('–ü–µ—Ä–µ–≥–ª—è–¥ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤')),
              body: Stack(
                children: [
                  Padding(
                    padding: const EdgeInsets.all(16),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [

                        /// üìÅ –®–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏ –≤ —Ä–∞–º—Ü—ñ
                        Container(
                          padding: const EdgeInsets.all(12),
                          decoration: BoxDecoration(
                            border: Border.all(color: Colors.grey),
                            borderRadius: BorderRadius.circular(8),
                          ),
                          child: Row(
                            children: [
                              Expanded(
                                child: Text(
                                  folderPath ?? '–ü–∞–ø–∫—É –Ω–µ –≤–∏–±—Ä–∞–Ω–æ',
                                  style: const TextStyle(
                                      fontWeight: FontWeight.bold),
                                ),
                              ),
                              ElevatedButton(
                                onPressed: () => _selectFolder(context),
                                child: const Text('–í–∏–±—Ä–∞—Ç–∏ –ø–∞–ø–∫—É'),
                              ),
                            ],
                          ),
                        ),

                        const SizedBox(height: 16),

                        /// ‚ûï –ö–Ω–æ–ø–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–µ–≥—ñ–æ–Ω—ñ–≤
                        Align(
                          alignment: Alignment.centerLeft,
                          child: ElevatedButton(
                            onPressed: () => _toggleData(),

                            child: const Text('–î–æ–¥–∞—Ç–∏ —Ä–µ–≥—ñ–æ–Ω–∏'),
                          ),
                        ),

                        const SizedBox(height: 24),

                        /// üìÑ –¢–∞–±–ª–∏—Ü—è –∑ —Ä–∞–º–∫–æ—é
                        const Text(
                          '–î–æ–∫—É–º–µ–Ω—Ç–∏',
                          style: TextStyle(
                              fontSize: 18, fontWeight: FontWeight.bold),
                        ),
                        const SizedBox(height: 12),

                        Expanded(
                          child: Container(
                            decoration: BoxDecoration(
                              border: Border.all(color: Colors.grey.shade400),
                              borderRadius: BorderRadius.circular(8),
                            ),
                            padding: const EdgeInsets.all(8),
                            child: const _MockDocumentTable(),
                          ),
                        ),
                      ],
                    ),
                  ),
                  if (_regionPanelController.isCompleted ||
                      _regionPanelController.isAnimating)
                    GestureDetector(
                      onTap: _toggleData,
                      child: AnimatedOpacity(
                        opacity: _regionPanelController.value,
                        duration: const Duration(milliseconds: 300),
                        child: Container(
                          color: Colors.black,
                          width: double.infinity,
                          height: double.infinity,
                        ),
                      ),
                    ),

                  /// üî≥ –ó–∞—Ç–µ–º–Ω–µ–Ω–Ω—è –¥–ª—è ExecutorPanel
                  if (isExecutorPanelOpen)
                    GestureDetector(
                      onTap: () => context.read<RegionSelectionCubit>().clear(),
                      child: AnimatedOpacity(
                        opacity: 0.5,
                        duration: const Duration(milliseconds: 300),
                        child: Container(
                          color: Colors.black,
                          width: double.infinity,
                          height: double.infinity,
                        ),
                      ),
                    ),

                  /// üì¶ –ü–∞–Ω–µ–ª—å –†–µ–≥—ñ–æ–Ω—ñ–≤, —è–∫–∞ –∑—Å—É–≤–∞—î—Ç—å—Å—è, —è–∫—â–æ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –í–∏–∫–æ–Ω–∞–≤—Ü—ñ
                  SlideTransition(
                    position: isExecutorPanelOpen
                        ? Tween<Offset>(
                      begin: Offset.zero,
                      end: const Offset(-0.4, 0),
                    ).animate(CurvedAnimation(parent: _executorPanelController,
                        curve: Curves.easeInOut))
                        : _regionPanelOffset,
                    child: Align(
                      alignment: Alignment.centerRight,
                      child: SizedBox(
                        width: dataWidth,
                        height: double.infinity,
                        child: const Material(
                          elevation: 8,
                          child: RegionPanel(),
                        ),
                      ),
                    ),
                  ),

                  /// üì¶ –ü–∞–Ω–µ–ª—å –í–∏–∫–æ–Ω–∞–≤—Ü—ñ–≤
                  SlideTransition(
                    position: _executorPanelOffset,
                    child: Align(
                      alignment: Alignment.centerRight,
                      child: SizedBox(
                        width: MediaQuery
                            .of(context)
                            .size
                            .width * 0.4,
                        height: double.infinity,
                        child: Material(
                          elevation: 8,
                          child: selectedRegion != null
                              ? ExecutorOfficesPanel(regionId: selectedRegion.id)
                              : const SizedBox(),
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            );
          },
        ),
      );

  }
}

/// üîß –ú–æ–∫–æ–≤—ñ –¥–∞–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
class _MockDocumentTable extends StatelessWidget {
  const _MockDocumentTable();

  @override
  Widget build(BuildContext context) {
    final documents = [
      {
        '–ü–Ü–ë': '–Ü–≤–∞–Ω–µ–Ω–∫–æ –Ü.–Ü.',
        '–ü–æ—Å—Ç–∞–Ω–æ–≤–∞': '–ê–ê123456',
        '–°—É–º–∞': '340 –≥—Ä–Ω',
        '–û–±–ª–∞—Å—Ç—å': '–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞',
        '–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å': '–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–µ –í–î–í–°',
      },
      {
        '–ü–Ü–ë': '–ü–µ—Ç—Ä–µ–Ω–∫–æ –ü.–ü.',
        '–ü–æ—Å—Ç–∞–Ω–æ–≤–∞': 'BB654321',
        '–°—É–º–∞': '510 –≥—Ä–Ω',
        '–û–±–ª–∞—Å—Ç—å': '–õ—å–≤—ñ–≤—Å—å–∫–∞',
        '–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å': '–õ—å–≤—ñ–≤—Å—å–∫–µ –í–î–í–°',
      },
    ];

    return SingleChildScrollView(
      child: DataTable(
        columns: const [
          DataColumn(label: Text('–ü–Ü–ë')),
          DataColumn(label: Text('–ü–æ—Å—Ç–∞–Ω–æ–≤–∞')),
          DataColumn(label: Text('–°—É–º–∞')),
          DataColumn(label: Text('–û–±–ª–∞—Å—Ç—å')),
          DataColumn(label: Text('–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å')),
        ],
        rows: documents.map((doc) {
          return DataRow(
            cells: [
              DataCell(Text(doc['–ü–Ü–ë']!)),
              DataCell(Text(doc['–ü–æ—Å—Ç–∞–Ω–æ–≤–∞']!)),
              DataCell(Text(doc['–°—É–º–∞']!)),
              DataCell(Text(doc['–û–±–ª–∞—Å—Ç—å']!)),
              DataCell(Text(doc['–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å']!)),
            ],
          );
        }).toList(),
      ),
    );
  }
}
