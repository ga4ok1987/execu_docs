import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:file_picker/file_picker.dart';
import 'package:go_router/go_router.dart';

import '../blocs/folder_cubit.dart';

class MainPage extends StatelessWidget {
  const MainPage({super.key});

  Future<void> _selectFolder(BuildContext context) async {
    final result = await FilePicker.platform.getDirectoryPath();
    if (result != null) {
      context.read<FolderCubit>().setFolder(result);
    }
  }

  @override@override
  Widget build(BuildContext context) {
    final folderPath = context.watch<FolderCubit>().state;

    return Scaffold(
      appBar: AppBar(
        title: const Text('–ü–µ—Ä–µ–≥–ª—è–¥ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            /// üìÅ –®–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏ –≤ —Ä–∞–º—Ü—ñ
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                border: Border.all(color: Colors.grey),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Row(
                children: [
                  Expanded(
                    child: Text(
                      folderPath ?? '–ü–∞–ø–∫—É –Ω–µ –≤–∏–±—Ä–∞–Ω–æ',
                      style: const TextStyle(fontWeight: FontWeight.bold),
                    ),
                  ),
                  ElevatedButton(
                    onPressed: () => _selectFolder(context),
                    child: const Text('–í–∏–±—Ä–∞—Ç–∏ –ø–∞–ø–∫—É'),
                  ),
                ],
              ),
            ),

            const SizedBox(height: 16),

            /// ‚ûï –ö–Ω–æ–ø–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–µ–≥—ñ–æ–Ω—ñ–≤
            Align(
              alignment: Alignment.centerLeft,
              child: ElevatedButton(
                onPressed: () => context.go('/data'),
                child: const Text('–î–æ–¥–∞—Ç–∏ —Ä–µ–≥—ñ–æ–Ω–∏'),
              ),
            ),

            const SizedBox(height: 24),

            /// üìÑ –¢–∞–±–ª–∏—Ü—è –∑ —Ä–∞–º–∫–æ—é
            const Text(
              '–î–æ–∫—É–º–µ–Ω—Ç–∏',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 12),

            Expanded(
              child: Container(
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.grey.shade400),
                  borderRadius: BorderRadius.circular(8),
                ),
                padding: const EdgeInsets.all(8),
                child: const _MockDocumentTable(),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
/// üîß –ú–æ–∫–æ–≤—ñ –¥–∞–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
class _MockDocumentTable extends StatelessWidget {
  const _MockDocumentTable();

  @override
  Widget build(BuildContext context) {
    final documents = [
      {
        '–ü–Ü–ë': '–Ü–≤–∞–Ω–µ–Ω–∫–æ –Ü.–Ü.',
        '–ü–æ—Å—Ç–∞–Ω–æ–≤–∞': '–ê–ê123456',
        '–°—É–º–∞': '340 –≥—Ä–Ω',
        '–û–±–ª–∞—Å—Ç—å': '–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞',
        '–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å': '–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–µ –í–î–í–°',
      },
      {
        '–ü–Ü–ë': '–ü–µ—Ç—Ä–µ–Ω–∫–æ –ü.–ü.',
        '–ü–æ—Å—Ç–∞–Ω–æ–≤–∞': 'BB654321',
        '–°—É–º–∞': '510 –≥—Ä–Ω',
        '–û–±–ª–∞—Å—Ç—å': '–õ—å–≤—ñ–≤—Å—å–∫–∞',
        '–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å': '–õ—å–≤—ñ–≤—Å—å–∫–µ –í–î–í–°',
      },
    ];

    return SingleChildScrollView(
      child: DataTable(
        columns: const [
          DataColumn(label: Text('–ü–Ü–ë')),
          DataColumn(label: Text('–ü–æ—Å—Ç–∞–Ω–æ–≤–∞')),
          DataColumn(label: Text('–°—É–º–∞')),
          DataColumn(label: Text('–û–±–ª–∞—Å—Ç—å')),
          DataColumn(label: Text('–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å')),
        ],
        rows: documents.map((doc) {
          return DataRow(cells: [
            DataCell(Text(doc['–ü–Ü–ë']!)),
            DataCell(Text(doc['–ü–æ—Å—Ç–∞–Ω–æ–≤–∞']!)),
            DataCell(Text(doc['–°—É–º–∞']!)),
            DataCell(Text(doc['–û–±–ª–∞—Å—Ç—å']!)),
            DataCell(Text(doc['–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å']!)),
          ]);
        }).toList(),
      ),
    );
  }
}